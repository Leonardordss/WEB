Projeto 1 para utilizar o CRUD

Para começar o projeto cria o ambiente: comando py -m venv venv

A pasta "venv" tem que ser colocada na pasta gitignore para não subir para o github

Sempre que fizer um clone no projeto do git deve ser feito o comando py -m venv venv

Após instalar a venv ela deve ser ativada sempre. Até mesmo se o terminal for excluído: comando .\venv\Scripts\activate

Após feito os passos acima é instalado o ambiente de trabalho. No caso Django: comando pip install django

O primeiro comando pip install django apenas cria o Django. O segundo comando installa o Django: comando django-admin startproject manflix .

Após esse passo é criado o App: comando django-admin startapp app

É preciso dizer para o Django usar o app criado. Foi usado o nome app, mas poderia ser qualquer nome escolhido. Para ativar entrar em settings na pasta do projeto, exemplo manflix e
em INSTALLED_APPS digitar 'app'

Para rodar o Django fazer o runserver: comando py .\manage.py runserver. Se não funcionar, trocar a porta. Exemplo py .\manage.py runserver 8080

//////////////////////////////////////

O comando py .\manage.py makemigrations para criar o ambiente de tabela

O comando py .\manage.py migrate vai realmente criar a tabela

Na página que o Django abriu após rodar o servidor colocar /admin no endereço da página. Exemplo http://127.0.0.1:8000/admin. Isto vai criar um usuario de administracao: comando py .\manage.py createsuperuser

/////////////////////////////////////

Para a programação começou dentro de app na pasta models. Models onde é feito toda a lógica. Começamos criando as tabelas do banco de dados.

Usa py .\manage.py makemigrations para ele ler o que foi feito no código e detectar e depois py .\manage.py migrate para realmente o Django criar a tabela.

Depois disso ir na pasta Admin.py e chamar from .models import e admin.site.register(Movie) por exemplo. Foi criado a tabela Movie no banco.

Tem que chamar sempre no admin.py qualquer tabela criada em models.py

/////////////////////////////////////

Após criar as tabelas e a página de admin ser possível adicionar os dados e cadastro vamor criar a API do CRUD

Começamos instalando com o comando no terminal pip install djangorestframework

Após isso vamos na pasta settings do projeto e habilitar como 'rest_framework' acima de 'app'

Criamos um arquivo chamado serializer e colocamos as classes com o nome das tabelas criadas. Ele vai pegar o JSON e converter para PYTHON e vice versa

